devtools::install_github("rstudio/fontawesome")
install.packages('DiagrammeR')
devtools::install_github("hadley/emo")
devtools::install_github("rstudio/gt")
devtools::install_github("gadenbuie/countdown")
install.packages('here')
remotes::install_github('yihui/xaringan', upgrade = TRUE)
xaringan::inf_mr()
version$version.string
RStudio.Version()$version
mtcars
str(mtcars)
head(mtcars)
summary(mtcars$cyl)
str(diamonds)
head(diamonds)
xaringan:::inf_mr()
servr::daemon_stop(2)
servr::daemon_stop()
servr::daemon_stop()
xaringan::infinite_moon_reader()
?read_table
readr::read_table2(path_pc, col_types = cols_only(ID = col_integer(),
NCLAIMS = col_integer(),
AMOUNT = col_double(),
AVG = col_double()))
readr::read_table2(path_pc, col_types = cols(ID = col_integer(),
AVG = col_double(),
PC = col_factor()))
readr::read_table2(path_pc, col_types = cols_only(ID = col_integer(),
AVG = col_double(),
PC = col_factor()))
summary(mtpl_tidy$COVERAGE)
summary(mtpl_tidy$COVERAGE)
table(mtpl_tidy$COVERAGE)
?barplot
table(mtpl_tidy$SEX, mtpl_tidy$FUEL)        # no name_df$name_var necessary
prop.table(table(mtpl_tidy$SEX, mtpl_tidy$FUEL))
prop.table(table(mtpl_tidy$SEX, mtpl_tidy$FUEL), 1)
prop.table(table(mtpl_tidy$SEX, mtpl_tidy$FUEL), 2)
tapply(mtpl_tidy$POWER, mtpl_tidy$SEX, mean)
tapply(mtpl_tidy$POWER, list(mtpl_tidy$SEX, mtpl_tidy$FUEL), mean)
tapply(mtpl_tidy$POWER, mtpl_tidy$USE, mean)
tapply(mtpl_tidy$POWER, list(mtpl_tidy$USE, mtpl_tidy$FUEL), mean)
tapply(mtpl_tidy$POWER, mtpl_tidy$FLEET, mean)
tapply(mtpl_tidy$POWER, mtpl_tidy$USE, mean)
?tapply
plot(AGEPH ~ POWER, data = journals)
plot(AGEPH ~ POWER, data = mtpl_tidy)
rug(mtpl_tidy$AGEPH)
rug(mtpl_tidy$POWER, side = 2)
mtpl_tidy[1:1000]
mtpl_tidy[1:1000, ]
plot(AGEPH ~ POWER, data = mtpl_tidy[1:1000, ],
pch = 12, col = "blue", xlim = c(10, 150),
main = 'Basic scatterplot')
ggplot(data = mtpl_tidy)
ggplot(mpg) + geom_point(aes(x = displ, y = hwy, color = "blue"))
ggplot(mpg) + geom_point(aes(x = displ, y = hwy, color = "blue"))
ggplot(mpg) + geom_point(aes(x = displ, y = hwy), color = "blue")
?labs
ggplot(data = mtpl_tidy,
mapping = aes(x = FUEL, fill = USE)) +
geom_bar()
ggplot(data = mtpl_tidy,
mapping = aes(x = FUEL, fill = USE)) +
geom_bar(position = 'dodge')
ggplot(data = mtpl_tidy,
mapping = aes(x = POWER)) +
geom_hist()
ggplot(data = mtpl_tidy,
mapping = aes(x = POWER)) +
geom_histogram()
ggplot(data = mtpl_tidy,
mapping = aes(x = POWER)) +
geom_histogram(bins = 20)
ggplot(data = mtpl_tidy,
mapping = aes(x = POWER)) +
geom_histogram(bins = 40)
ggplot(data = mtpl_tidy,
mapping = aes(x = POWER)) +
geom_histogram(bins = 40)
?geom_histogram
ggplot(data = mtpl_tidy,
mapping = aes(x = POWER)) +
geom_histogram(bins = 40, y = ..density..) +
geom_density()
ggplot(data = mtpl_tidy,
mapping = aes(x = POWER)) +
geom_histogram(aes(y = ..density..), bins = 40, ) +
geom_density()
ggplot(data = mtpl_tidy,
mapping = aes(x = POWER)) +
geom_histogram(aes(y = ..density..), bins = 40, ) +
geom_density(color = "blue")
names(mtpl_tidy)
diamonds
subset(diamonds, cut == "Ideal")
diamonds[, c("carat", "cut", "color", "clarity")]
diamonds
subset(diamonds, cut == "Ideal")
diamonds[, c("carat", "cut", "color", "clarity")]
diamonds$price/diamonds$carat
aggregate(price ~ cut, diamonds, mean)
aggregate(price ~ cut + color, diamonds, mean)
as_tibble(mtcars)
str(as_tibble(mtcars))
?str
diamonds %>% subset(cut == "Ideal")
"Ideal" %>% subset(diamonds, cut == .)
diamonds
diamonds %>% filter(cut == "Ideal")
str(diamonds)
str(diamonds)
install.packages('formatR')
mtcars
options(crayon.enabled = FALSE)
xaringan:::inf_mr()
mtcars
mtcars %>% filter(hp > 200)
mtcars %>% filter(hp > 200) %>% class()
mtcars %>% filter(hp > 200) %>% mutate(hp_per_wt = hp / wt) %>% class()
head(mtpl_tidy)
katrien <- c(19, 22, 4, 5, 7)
katrien > 5
here:here()
here::here()
path <- here::here()
path
setwd(path)
file.exists("R_introduction.Rmd")
path <- here::here()
setwd(path)
file.exists("R_introduction.Rmd")
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
?read.table
default.stringsAsFactors()
?weighted.mean
5%2
5%%2
?%%
for(x in 'string') print(x)
ifelse
?ifelse
servr::daemon_stop()
xaringan::infinite_moon_reader()
servr::daemon_stop()
xaringan::infinite_moon_reader()
servr::daemon_stop()
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
?format
?format.Date
?strftime
?strptime
?as.POSIXct()
as.Date("06/17/2019", "%m/%d/%Y")
as.POSIXct("06/17/2019", "%m/%d/%Y")
as.POSIXlt("06/17/2019", "%m/%d/%Y")
as.POSIXct("2019-03-15 16:17:42" , format="%Y-%m-%d %H:%M:%OS")
as.POSIXct("06/17/2019 15:01:56" , format="%m/%d/%Y %H:%M:%S")
as.POSIXct("06/17/2019 15:01" , format="%m/%d/%Y %H:%M")
as.POSIXct("06/17/2019" , format="%m/%d/%Y")
as.POSIXct("06/17/2019" , "%m/%d/%Y")
as.POSIXct("06/17/2019" , format="%m/%d/%Y")
class(as.Date("06/17/2019", "%m/%d/%Y"))
class(as.POSIXct("06/17/2019" , format="%m/%d/%Y"))
as.POSIXct("06/17/2019")
path_pc <- file.path('../data/PC_data.txt')
mtpl_tidy <- readr::read_table2(path_pc, col_types = 'iidddfffffiiiiffdd')
str(mtpl_tidy, give.attr = FALSE)
ggplot(mtpl_tidy, aes(x = FUEL, fill = SEX)) +
geom_bar(aes(y = ..count../sum(..count..)),
position = 'dodge')
ggplot(mtpl_tidy, aes(x = FUEL, fill = SEX)) +
geom_bar(aes(y = ..count../sum(..count..)),
position = 'fill')
ggplot(mtpl_tidy, aes(x = FUEL, fill = SEX)) +
geom_bar(aes(y = ..count../sum(..count..)))
ggplot(mtpl_tidy, aes(x = FUEL, fill = SEX)) +
geom_bar(aes(y = ..count../sum(..count..)),
position = 'fill')
ggplot(mtpl_tidy, aes(x = SEX, fill = FUEL)) +
geom_bar(aes(y = ..count../sum(..count..)),
position = 'fill')
ggplot(mtpl_tidy, aes(x = AGEPH, y = POWER)) +
geom_hex()
ggplot(mtpl_tidy, aes(x = AGEPH, y = POWER)) +
geom_bin2d()
xaringan::infinite_moon_reader()
install.packages('caret')
install.packages('rsample')
install.packages('AmesHousing')
AmesHousing::make_ames()
nrow(ames)
nrow(ames) * 0.7
map_dbl(cv_folds,
function(x) {
mean(ames[x, ]$Sale_Price)
})
map_dbl(cv_folds,
function(x) {
mean(ames[x, ]$Sale_Price)
})
map_dbl(cv_folds, ~ mean(ames[., ]$Sale_Price))
df
m_1 <- lm(Sale_Price ~ Year_Built, data = ames_train)
m_2 <- lm(log(Sale_Price) ~ Year_Built, data = ames_train)
res_1 <- m_1 %>% broom::augment()
res_2 <- m_2 %>% broom::augment()
g_res_1 <- ggplot(data = res_1, aes(.resid)) + theme_bw() +
geom_histogram(bins = 75, col = KULbg, fill = KULbg, alpha = .5) +
ylab(NULL) + ggtitle("AMES - original target") +
xlab("Residuals")
g_res_2 <- ggplot(data = res_2, aes(.resid)) + theme_bw() +
geom_histogram(bins = 75, col = KULbg, fill = KULbg, alpha = 0.5) +
ylab(NULL) + ggtitle("AMES - log transformed target") +
xlab("Residuals")
gridExtra::grid.arrange(g_res_1, g_res_2, nrow = 1)
res_1
res_1
g_res_1 <- ggplot(data = res_1, aes(x = .resid)) + theme_bw() +
geom_histogram(bins = 75, col = KULbg, fill = KULbg, alpha = .5) +
ylab(NULL) + ggtitle("AMES - original target") +
xlab("Residuals")
g_res_1
res_1 <- m_1 %>% broom::augment()
res_2 <- m_2 %>% broom::augment()
res_1 %>% slice(1:2) %>% select(Sale_Price,
Year_Built, .resid)
res_1 %>% slice(1:2) %>% select(Sale_Price, Year_Built, .resid) %>% kable(format = 'html')
g_res_1 <- ggplot(data = res_1, aes(x = .resid)) +
theme_bw() +
geom_histogram(bins = 75, col = col, fill = fill) +
ylab(NULL) + ggtitle("AMES - original target") +
xlab("Residuals")
g_res_1
g_res_1
g_res_1 <- ggplot(data = res_1, aes(x = .resid)) +
theme_bw() +
geom_histogram(bins = 75, col = col, fill = fill) +
ylab(NULL) + ggtitle("AMES - original target") +
xlab("Residuals")
g_res_1
library(gridExtra)
m_1 <- lm(Sale_Price ~ Year_Built, data = ames_train)
m_2 <- lm(log(Sale_Price) ~ Year_Built, data = ames_train)
res_1 <- m_1 %>% broom::augment()
res_2 <- m_2 %>% broom::augment()
g_res_1 <- ggplot(data = res_1, aes(x = .resid)) + theme_bw() +
geom_histogram(bins = 75, col = KULbg, fill = KULbg, alpha = .5) +
ylab(NULL) + ggtitle("AMES - original target") +
xlab("Residuals")
g_res_2 <- ggplot(data = res_2, aes(x = .resid)) + theme_bw() +
geom_histogram(bins = 75, col = KULbg, fill = KULbg, alpha = 0.5) +
ylab(NULL) + ggtitle("AMES - log transformed target") +
xlab("Residuals")
gridExtra::grid.arrange(g_res_1, g_res_2, nrow = 1)
g_res_1
g_res_2
res_2
res_2
res_1
ggplot(data = ames_train, aes(x = Sale_Price)) +
theme_bw() +
geom_histogram(bins = 75, col = col, fill = fill) +
ylab(NULL) + ggtitle("AMES - original target") +
xlab("Residuals")
ames_train
ggplot(data = ames_train, aes(x = Sale_Price))
ggplot(data = ames_train, aes(x = Sale_Price)) +
theme_bw() +
geom_histogram(bins = 75, col = col, fill = fill)
ggplot(data = ames_train, aes(x = Sale_Price)) +
theme_bw() +
geom_histogram(bins = 75)
ggplot(data = ames_train, aes(x = Sale_Price)) +
theme_bw() +
geom_histogram(bins = 75, col = KULbg, fill = KULbg) +
ylab(NULL) + ggtitle("AMES - original target") +
xlab("Residuals")
ggplot(data = ames_train, aes(x = Sale_Price)) +
geom_histogram(bins = 75, col = KULbg, fill = KULbg, alpha = 0.5) +
theme_bw() + ylab(NULL) + ggtitle("AMES - original target") +
```
ggplot(data = ames_train, aes(x = Sale_Price)) +
geom_histogram(bins = 75, col = KULbg, fill = KULbg, alpha = 0.5) +
theme_bw() + ylab(NULL) + ggtitle("AMES - original target") +
ggplot(data = ames_train, aes(x = Sale_Price)) +
geom_histogram(bins = 75, col = KULbg, fill = KULbg, alpha = 0.5) +
theme_bw() + ylab(NULL) + ggtitle("AMES - original target")
?createDataPartition
caret::createFolds(
y = train_caret$Sale_Price, k = 5,
list = TRUE, returnTrain = FALSE)
list(cv_caret, test_caret)
cv_caret
c(cv_caret, Test = -ind_caret)
c(cv_caret, list(Test = -ind_caret))
ind_caret
c(cv_caret, list(Test = -as.vector(ind_caret)))
ind_caret <- caret::createDataPartition(
y = ames$Sale_Price, p = 5/6, list = TRUE)
ind_caret
- ind_caret
ind_caret <- caret::createDataPartition(
y = ames$Sale_Price, p = 5/6, list = FALSE)
ind_caret[, 1]
c(cv_caret, list(Test = -ind_caret[, 1]))
purrr::map_dbl(c(cv_caret, list(Test = -ind_caret[, 1])),
~ nrow(ames[., ]))
set.seed(5678)
ind_rsample  <- rsample::initial_split(ames,
prop = 5/6)
train_rsample  <- rsample::training(ind_rsample)
test_rsample   <- rsample::testing(ind_rsample)
train_rsample
test_rsample
cv_rsample <- rsample::vfold_cv(train_rsample, v = 5)
cv_rsample
summary(model_1)
model_1 <- lm(Sale_Price ~ Gr_Liv_Area, data = ames)
summary(model_1)
(model_1 <- lm(Sale_Price ~ Gr_Liv_Area, data = ames))
rm(model_1)
model_1
(model_1 <- lm(Sale_Price ~ Gr_Liv_Area, data = ames))
model_1
summary(model_1)
model_1 %>% broom::tidy()
?broom::tidy
rstudioapi::getActiveDocumentContext()$path
dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dir)
mtpl_orig <- read.table('../data/PC_data.txt',
header = TRUE)
mtpl_orig <- as_tibble(mtpl_orig)
mtpl_orig
dir <- here::here()
setwd(dir)
mtpl_orig <- read.table('../data/P&Cdata.txt',
header = TRUE)
mtpl_orig <- as_tibble(mtpl_orig)
here::here()
?rename_all
mtpl_orig
mtpl_orig %>% rename(across(everything(), tolower))
mtpl_orig %>% rename_all(tolower)
mtpl %>% rename(expo = exp)
mtpl_orig %>% rename_all(tolower)
mtpl <- mtpl_orig %>% rename_all(tolower)
mtpl %>% rename(expo = exp)
mtpl <- mtpl %>% rename(expo = exp)
mtpl
freq_glm_1
freq_glm_1 %>% broom::augment(type.predict = "response")
str(mtpl)
mtpl_orig <- read.table('../data/P&Cdata.txt',
header = TRUE)
str(mtpl_orig)
as_tibble(mtpl_orig)
mtpl_orig <- read.table('../data/PC_data.txt',
header = TRUE, stringsAsFactors = TRUE)
str(mtpl_orig)
str(mtpl)
mtpl[, c("coverage")]
str(mtpl)
read.table('../data/PC_data.txt',
header = TRUE,
stringsAsFactors = TRUE)
mtpl_orig <- read.table('../data/PC_data.txt',
header = TRUE,
stringsAsFactors = TRUE)
str(mtpl_orig)
mtpl_orig <- as_tibble(mtpl_orig)
str(mtpl_orig)
mtpl <- mtpl_orig %>% rename_all(tolower) %>% rename(expo = exp)
str(mtpl)
str(mtpl)
mtpl_orig <- read.table('../data/PC_data.txt',
header = TRUE,
stringsAsFactors = TRUE)
mtpl_orig <- as_tibble(mtpl_orig)
str(mtpl_orig)
mtpl <- mtpl_orig %>% rename_all(tolower) %>% rename(expo = exp)
str(mtpl)
servr::daemon_stop()
xaringan::infinite_moon_reader()
servr::daemon_stop(2)
xaringan::infinite_moon_reader()
?\foreach::`%dopar%`()
?foreach::`%dopar%`()
?relocate
?prepper
?kable
servr::daemon_stop()
